Capybara

É um framework de automação de testes em aplicações web. É utilizado para testar as aplicações sumulando as ações
que os usuários reais executariam na aplicação.É necessário ter o Ruby instalado.

Selenium webdriver

É uma ferramenta livre para testes automatizados de aplicativos da web.

Chromedriver
É um servidor autônomo que implementa o protocolo de conexão do webdriver para o chromium.

Buscando elementos na página:

all ('elemento') - busca todos os elementos
find ('elemento') - busca um elemento mapeado
first ('elemento') - busca o primeiro elemento encontrado
find_button - busca um botão na página
find_link - busca um link na página
find_by_id - busca o elemento com o ID mapeado

Outras formas de fazer a busca de elementos: https://www.rubydoc.info/github/teamcapybara/capybara/master/capybara/node/finders

Buscando opções:

text (string, regexp) - busca por um texto exatamente igual ao preenchido
exact_text (string, boolean) - busca uma string exatamente igual preenchida
visible (boolean, symbol) - busca elementos que estão visível
count (integer) - busca o número exato de elementos encontrados na tela
maximum (integer) - busca o número máximo de elementos encontrados na tela
minimum (integer) - busca o número mínimo de elementos encontrados na tela
between (range) - busca o número de elementos encontrados em uma determinada range
exact (boolean) - busca um elemento exatamente igual ao regex criado por um css ou xpath
wait (integer, false) - espera o tempo delimitado para esperar o elemento aparecer na tela

Clicando em buttons e links

find(elemento).click
find(elemento).double.click
find(elemento.right)_click
click_on - clica em links ou botões
click_link_or_button - clica em links ou botões
click_button - clica em botões encontrado pelo locator
click_link - clica no link pelo id.texto ou title

Formulários

Comandos principais:


find(elemento).set "campo a preencher"
find(elemento).send_keys("campos a preencher")
fill_in => localize um campo de texto ou área de teexto e preencha-o com o texto fornecido (o campo pode ser
encontrado através do seu nome, id ou texto)

Opções

wait -tempo máximo de espera
:with - o valor a preencher - obrigatório
:fill_options - opções esecíficas do driver sobre como preencher campos
:currently_with - a propriedade de valor atual do campo para preencher
:multiple - corresponder campos que podem ter vários valores
:id - corresponde a cmpos do atributo ID
:name - corresponde a campos do atributo name
:placeholder - corresponde a campos placeholder
:class - corresponde a campos class


DROPDOWN, SELECT E AUTOCOMPLETE

Para usarmos o dropdown: 
find(elemento).click

Select : encontra uma caixa de seleção na página e seleciona uma opção específica delimitado
Unselect : encontra uma caixa de seleção na página e desmarque uma opção específica dela 
select_option : seleciona uma opção esecífica 

Radiovox e checkbox

find(elemento).click
check - encontre uma caixa de seleção e marque-a como marcado
choose - encontre um botão de opção e marque-o como marcado
uncheck - encontre uma caixa de seleção e desmarque

opções:

id
name
class
allow_label_click - tenta clicar no rótulo para alterar o estado se o elemento não estiver visível
wait

Verificando se um elemento existe na tela

Assert

assert_none_of_selector - afirma que não tenho nenhum dos seletores fornecidos está presente na página atual
assert_matches_selector - afirma que ocurrent_node corresponde a um determinado seletor
assert_text - afirma que a página atual corresponde a um determinado seletor

Has

has_select - verifica se a página tem um campo de seleão com o rótulo, o nome ou id fornecido
has_table - verifica se a página possui uma tabela com o ID ou a legenda especificada
has_text - verifica se a página tem o conteúdo de text especificado
has_css - verifica se um determinado seletor de css está na página

Matchers 

matches_css - verifica se o nó atual corresponde ao seletor de css especificado
matches_selector - verifica se o nó atual corresponde ao seletor especificado
matches_xpath - verifica se o nó atual corresponde a determinada expressão xpath

Rspec Matchers

have_button - verifica se a página atual possui um botão com o texto, valor ou id especificado
have_link - verifica se a página atual possui um link especificado
have_text - verifica se a página atual possui um texto especificado
have_title - verifica se a página atual possui um determinado título

Verificando se um elemento NÃO existe na tela

Assert

assert_no_selector - afirma que não tenho nenhum dos seletores fornecidos está presente na página atual
assert_no_matches_selector - afirma que ocurrent_node corresponde a um determinado seletor
assert_no_text - afirma que a página atual não corresponde a um determinado seletor


Has

has_no_select - verifica se a página tem um campo de seleão com o rótulo, o nome ou id fornecido
has_no_table - verifica se a página possui uma tabela com o ID ou a legenda especificada
has_no_text - verifica se a página tem o conteúdo de text especificado
has_no_css - verifica se um determinado seletor de css está na página

Matchers 

not_matches_css - verifica se o nó atual corresponde ao seletor de css especificado
not_matches_selector - verifica se o nó atual corresponde ao seletor especificado
not_matches_xpath - verifica se o nó atual corresponde a determinada expressão xpath

Rspec Matchers

not_have_button - verifica se a página atual possui um botão com o texto, valor ou id especificado
not_have_link - verifica se a página atual possui um link especificado
not_have_text - verifica se a página atual possui um texto especificado
not_have_title - verifica se a página atual possui um determinado título


Mouse hover

find(elemento).hover - move o mouse até o elemento mapeado
find(elemento).hover.click - move o mouse até o elemeento mapeado e depois clica

Iframe e modal

Muda o foco para o elemento mapeado

within(elemento) do

end 

Muda o foco para o Iframe

within_frame(elemento) do

end

Execute o bloco dado dentro de um determinado fieldset dado o ID ou legenda daquele fieldset

within_fieldset(elemento) do

end 

Execute o bloco dado dentro de uma tabela específica, dado o id ou legenda dessa tabela
within_table(elemento) do

end

JANELAS

 within_window : altera para a janela fornecida executa o bloco especificado e retorna
 switch_to_window : retorna a janela que foi trocada para a que desejamos
 window_opened_by : obtem a janela que foi aberta pelo bloco passado (ex: quero abrir a janela que foi aberta por
 um click)
 current_window : retorna para a janela aberta
 open_new_window : abre nova janela
 windows : retorna todas as janelas abertas

 opções

 resize_to 800, 600 : aumenta o tamanho da tela com o tamanho desejado
 .close : fecha a janela
 .maximize : máximiza a janela
 .size  : obtém o tamanho da janela
 .current? : se esta janela é a janela na qual os comandos estão sendo executados
 .closed? : verifica se a janela foi fechada/está fechada
 .exists? : se a janela não está fechada


ALERT

accept_alert : execute o bloco aceitando um alerta
accept_confirm : execute o bloco, aceitando uma confirmação
dismiss_confirm : execute o bloqueio, dispensando uma confirmação
accept_prompt : execute o bloco, aceitando um prompt, respondendo opcionalmente ao prompt
dismiss_prompt : execute o bloco dispensando o prompt


TRABALHANDO COM UPLOAD DE ARQUIVOS


attach_file(elemento mapeado, caminho do arquivo, se necessário opções) : encontre um campo de arquivo na página
e anexe um arquivo dado seu caminho

opções:

wait - tempo máximo para aguardar a exibição
matches - estratégia correspondência a ser usada (:one, :first, :prefer_exact, :smart)
exact - passa valor especifico
multiple - campo de correspondência que permite a seleção de vários arquivos
id 
name
:class
make_visible - um hash de estilos css para alterar antes de tentar anexar o arquivo

SCRIPTS

Execute o script fornecido, porém não retorna um resultado. Isso é útil para scriots que retornam objetos complexos
como instruções jquery.

EX:

page.execute_script("$window.scrollby(0,550);")
result = page.evaluate_script('4+4');

Ele executa a ação/instrução mas não retorna nenhum valor


KEYBORAD

Funciona como o send_keys porém simula como se estivessemos digitando. É bem pouco usado.

element.send_keys(tecla)

:cancel
:help
:backspace
:tab
:clear
:return
:enter
:shift
:control
:alt
:pause
:escape
:space
:page_up
:f1
:f2
:f3
.............................


DRAG AND DROP

elemento1 = page.find('#winston')
elemento2 = page.find ('#dropzone')
elemento1.drag_to(@elemento2)

END TO END

Consiste em rodar todos os testes sem a necessidade de resetar a sessão para cada cenário que for finalizado

